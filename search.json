[{"path":[]},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement peterdiakumis@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://umccr.github.io/nemo/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://umccr.github.io/nemo/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Collaborative Centre Genomic Cancer Medicine (CCGCM) - Genomics Platform Group Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://umccr.github.io/nemo/articles/NEWS.html","id":"v0-0-1-2025-09-06","dir":"Articles","previous_headings":"","what":"v0.0.1 (2025-09-06)","title":"NEWS","text":"Initial release nemo (pr5) R pkg skeleton Documentation via pkgdown CLI Logger GitHub Actions CI/CD Fixing issues iss2, iss3 iss4","code":""},{"path":"https://umccr.github.io/nemo/articles/installation.html","id":"r","dir":"Articles","previous_headings":"","what":"R","title":"Installation","text":"Using {remotes} directly GitHub:","code":"install.packages(\"remotes\") remotes::install_github(\"umccr/nemo\") # latest main commit remotes::install_github(\"umccr/nemo@v0.0.0.9003\") # released version"},{"path":"https://umccr.github.io/nemo/articles/installation.html","id":"conda","dir":"Articles","previous_headings":"","what":"Conda","title":"Installation","text":"conda package available umccr channel https://anaconda.org/umccr/r-nemo.","code":"conda create \\   -n nemo_env \\   -c umccr -c conda-forge \\   r-nemo==0.0.0.9003  conda activate nemo_env"},{"path":"https://umccr.github.io/nemo/articles/installation.html","id":"pixi","dir":"Articles","previous_headings":"","what":"Pixi","title":"Installation","text":"use Pixi, can create new isolated environment deployed conda package: can create task run nemo.R CLI script: activate environment use nemo directly R environment:","code":"pixi init -c umccr -c conda-forge ./tidy_env cd ./tidy_env pixi add r-nemo==0.0.0.9003 pixi task add nemo \"nemo.R\" pixi run nemo --help pixi shell R library(nemo)"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"sql","dir":"Articles","previous_headings":"","what":"SQL","title":"Notes","text":"Atomic: Consistent: Isolated: online data backups Durable: guaranteed lose committed data remember select group column filters groups OFFSET skips first n rows LIMIT returns first n rows Grab names second third populated cities: UNION: join results two queries, remove duplicates UNION : keeps duplicates INTERSECT: join common rows two queries, remove duplicates INTERSECT : keeps duplicates EXCEPT: find rows first query second, remove duplicates EXCEPT : keeps duplicates CREATE TABLE ALTER TABLE CREATE TABLE ALTER TABLE CREATE TABLE ALTER TABLE CREATE TABLE ALTER TABLE Size per database: Create Drop Benchmark Size List indexes database Create e.g. 10 15 Drop \\c db_name: choose database \\?: help \\l: list databases \\dt: list tables \\d table_name: describe table \\e: open last query EDITOR \\conninfo: connected database “nemo” user “orcabus” via socket “/tmp” port “5432”. \\du: list users List tables","code":"DROP DATABASE IF EXISTS test1; CREATE DATABASE test1; DROP TABLE IF EXISTS cities; CREATE TABLE cities (     name VARCHAR(50),     country VARCHAR(50),     population INTEGER,     area INTEGER ); INSERT INTO cities (name, country, population, area) VALUES  ('Tokyo', 'Japan', 38505000, 8223),  ('Delhi', 'India', 28125000, 2240),  ('Shanghai', 'China', 22125000, 4015),  ('Sao Paulo', 'Brazil', 20935000, 3043); SELECT * FROM cities WHERE population > 25000000; UPDATE cities SET population = 39505000 WHERE name = 'Tokyo'; DELETE FROM cities WHERE name = 'Sao Paulo'; CREATE TABLE users (     id SERIAL PRIMARY KEY,     username VARCHAR(50) ); CREATE TABLE photos (     id SERIAL PRIMARY KEY,     url VARCHAR(200),     user_id INTEGER REFERENCES users(id) ); SELECT users.username, photos.url FROM users JOIN photos ON users.id = photos.user_id; SELECT COUNT(*) FROM cities; SELECT SUM(population) FROM cities; SELECT AVG(population) FROM cities; SELECT MAX(population) FROM cities; SELECT MIN(population) FROM cities; SELECT authors.name, COUNT(*) FROM books JOIN authors ON authors.id = books.author_id GROUP BY authors.name; SELECT authors.name, COUNT(*) FROM books JOIN authors ON authors.id = books.author_id GROUP BY authors.name HAVING COUNT(*) > 1; SELECT * FROM cities ORDER BY population DESC; SELECT * FROM cities LIMIT 3; SELECT * FROM cities OFFSET 3; SELECT name FROM cities ORDER BY population DESC LIMIT 2 OFFSET 1; ( SELECT * FROM products ORDER BY price DESC LIMIT 4 ) UNION ( SELECT * FROM products ORDER BY price / weight DESC LIMIT 4 ); ( SELECT * FROM products ORDER BY price DESC LIMIT 4 ) INTERSECT ( SELECT * FROM products ORDER BY price / weight DESC LIMIT 4 ); CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) NOT NULL,   model VARCHAR(255) NOT NULL ); ALTER TABLE phones ALTER COLUMN manufacturer SET NOT NULL; CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) DEFAULT 'Apple',   model VARCHAR(255) NOT NULL ); ALTER TABLE phones ALTER COLUMN manufacturer SET DEFAULT 'Apple'; CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) NOT NULL,   model VARCHAR(255) NOT NULL UNIQUE ); ALTER TABLE phones ADD UNIQUE(model); CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) NOT NULL,   model VARCHAR(255) NOT NULL,   price NUMERIC CHECK (price > 0) ); ALTER TABLE phones ADD CHECK (price > 0); SELECT datname, pg_database_size(datname) AS bytes FROM pg_database datname  │  bytes ═══════════╪═════════  postgres  │ 7761043  pdiakumis │ 7842963  template1 │ 7842963  template0 │ 7602703  test1     │ 7924883 SHOW data_directory; # /opt/homebrew/var/postgresql@15 # see the dir above for the oid folders SELECT oid, datname FROM pg_database; # shows the individual files within each folder SELECT * FROM pg_class; CREATE INDEX ON cities (name, population); DROP INDEX cities_name_population_idx; EXPLAIN ANALYZE SELECT * FROM users WHERE username = 'Emil30'; SELECT pg_size_pretty(pg_relation_size('users')); SELECT relname, relkind FROM pg_class WHERE relkind = 'i'; CREATE VIEW recent_posts AS (     SELECT * FROM posts     ORDER BY created_at DESC     LIMIT 10 ); CREATE OR REPLACE VIEW recent_posts AS (     SELECT * FROM posts     ORDER BY created_at DESC     LIMIT 15 ); DROP VIEW recent_posts; DBI::dbListObjects(conn, Id(schema = \"mySchemaName\")) pg_dump --schema-only nemo > schema.txt dm <- dm:::dm_meta_raw(con, NULL) dm$columns tbl <- tibble::tibble(   dracarysId = \"abcd1234\",   foo_num = 123,   foo_dbl = 3.14,   foo_chr = \"foobar\",   foo_int = 35L, ) DBI::dbDataType(DBI::ANSI(), tbl) # dracarysId    foo_num    foo_dbl    foo_chr    foo_int #     \"TEXT\"   \"DOUBLE\"   \"DOUBLE\"     \"TEXT\"      \"INT\" DBI::dbGetInfo(con) |> str() # List of 8 #  $ dbname          : chr \"test1\" #  $ host            : chr \"/tmp\" #  $ port            : chr \"5432\" #  $ username        : chr \"pdiakumis\" #  $ protocol.version: int 3 #  $ server.version  : int 170002 #  $ db.version      : int 170002 #  $ pid             : int 17045"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"acid","dir":"Articles","previous_headings":"","what":"ACID","title":"Notes","text":"Atomic: Consistent: Isolated: online data backups Durable: guaranteed lose committed data","code":""},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"table-manipulation","dir":"Articles","previous_headings":"","what":"Table Manipulation","title":"Notes","text":"remember select group column filters groups OFFSET skips first n rows LIMIT returns first n rows Grab names second third populated cities: UNION: join results two queries, remove duplicates UNION : keeps duplicates INTERSECT: join common rows two queries, remove duplicates INTERSECT : keeps duplicates EXCEPT: find rows first query second, remove duplicates EXCEPT : keeps duplicates","code":"DROP DATABASE IF EXISTS test1; CREATE DATABASE test1; DROP TABLE IF EXISTS cities; CREATE TABLE cities (     name VARCHAR(50),     country VARCHAR(50),     population INTEGER,     area INTEGER ); INSERT INTO cities (name, country, population, area) VALUES  ('Tokyo', 'Japan', 38505000, 8223),  ('Delhi', 'India', 28125000, 2240),  ('Shanghai', 'China', 22125000, 4015),  ('Sao Paulo', 'Brazil', 20935000, 3043); SELECT * FROM cities WHERE population > 25000000; UPDATE cities SET population = 39505000 WHERE name = 'Tokyo'; DELETE FROM cities WHERE name = 'Sao Paulo'; CREATE TABLE users (     id SERIAL PRIMARY KEY,     username VARCHAR(50) ); CREATE TABLE photos (     id SERIAL PRIMARY KEY,     url VARCHAR(200),     user_id INTEGER REFERENCES users(id) ); SELECT users.username, photos.url FROM users JOIN photos ON users.id = photos.user_id; SELECT COUNT(*) FROM cities; SELECT SUM(population) FROM cities; SELECT AVG(population) FROM cities; SELECT MAX(population) FROM cities; SELECT MIN(population) FROM cities; SELECT authors.name, COUNT(*) FROM books JOIN authors ON authors.id = books.author_id GROUP BY authors.name; SELECT authors.name, COUNT(*) FROM books JOIN authors ON authors.id = books.author_id GROUP BY authors.name HAVING COUNT(*) > 1; SELECT * FROM cities ORDER BY population DESC; SELECT * FROM cities LIMIT 3; SELECT * FROM cities OFFSET 3; SELECT name FROM cities ORDER BY population DESC LIMIT 2 OFFSET 1; ( SELECT * FROM products ORDER BY price DESC LIMIT 4 ) UNION ( SELECT * FROM products ORDER BY price / weight DESC LIMIT 4 ); ( SELECT * FROM products ORDER BY price DESC LIMIT 4 ) INTERSECT ( SELECT * FROM products ORDER BY price / weight DESC LIMIT 4 );"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"createdrop-database","dir":"Articles","previous_headings":"","what":"Create/drop database","title":"Notes","text":"","code":"DROP DATABASE IF EXISTS test1; CREATE DATABASE test1;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"createdrop-table","dir":"Articles","previous_headings":"","what":"Create/drop table","title":"Notes","text":"","code":"DROP TABLE IF EXISTS cities; CREATE TABLE cities (     name VARCHAR(50),     country VARCHAR(50),     population INTEGER,     area INTEGER );"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"insert-data","dir":"Articles","previous_headings":"","what":"Insert data","title":"Notes","text":"","code":"INSERT INTO cities (name, country, population, area) VALUES  ('Tokyo', 'Japan', 38505000, 8223),  ('Delhi', 'India', 28125000, 2240),  ('Shanghai', 'China', 22125000, 4015),  ('Sao Paulo', 'Brazil', 20935000, 3043);"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"filter-data","dir":"Articles","previous_headings":"","what":"Filter data","title":"Notes","text":"","code":"SELECT * FROM cities WHERE population > 25000000;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"update-data","dir":"Articles","previous_headings":"","what":"Update data","title":"Notes","text":"","code":"UPDATE cities SET population = 39505000 WHERE name = 'Tokyo';"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"delete-data","dir":"Articles","previous_headings":"","what":"Delete data","title":"Notes","text":"","code":"DELETE FROM cities WHERE name = 'Sao Paulo';"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"primary-key","dir":"Articles","previous_headings":"","what":"Primary key","title":"Notes","text":"","code":"CREATE TABLE users (     id SERIAL PRIMARY KEY,     username VARCHAR(50) );"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"foreign-key","dir":"Articles","previous_headings":"","what":"Foreign key","title":"Notes","text":"","code":"CREATE TABLE photos (     id SERIAL PRIMARY KEY,     url VARCHAR(200),     user_id INTEGER REFERENCES users(id) );"},{"path":[]},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"join","dir":"Articles","previous_headings":"","what":"Join","title":"Notes","text":"","code":"SELECT users.username, photos.url FROM users JOIN photos ON users.id = photos.user_id;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"aggregate-functions","dir":"Articles","previous_headings":"","what":"Aggregate functions","title":"Notes","text":"","code":"SELECT COUNT(*) FROM cities; SELECT SUM(population) FROM cities; SELECT AVG(population) FROM cities; SELECT MAX(population) FROM cities; SELECT MIN(population) FROM cities;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"group-by-with-join","dir":"Articles","previous_headings":"","what":"Group by with Join","title":"Notes","text":"remember select group column","code":"SELECT authors.name, COUNT(*) FROM books JOIN authors ON authors.id = books.author_id GROUP BY authors.name;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"group-by-having","dir":"Articles","previous_headings":"","what":"Group by Having","title":"Notes","text":"filters groups","code":"SELECT authors.name, COUNT(*) FROM books JOIN authors ON authors.id = books.author_id GROUP BY authors.name HAVING COUNT(*) > 1;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"order","dir":"Articles","previous_headings":"","what":"ORDER","title":"Notes","text":"","code":"SELECT * FROM cities ORDER BY population DESC;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"offset-and-limit","dir":"Articles","previous_headings":"","what":"OFFSET and LIMIT","title":"Notes","text":"OFFSET skips first n rows LIMIT returns first n rows Grab names second third populated cities:","code":"SELECT * FROM cities LIMIT 3; SELECT * FROM cities OFFSET 3; SELECT name FROM cities ORDER BY population DESC LIMIT 2 OFFSET 1;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"union","dir":"Articles","previous_headings":"","what":"UNION","title":"Notes","text":"UNION: join results two queries, remove duplicates UNION : keeps duplicates","code":"( SELECT * FROM products ORDER BY price DESC LIMIT 4 ) UNION ( SELECT * FROM products ORDER BY price / weight DESC LIMIT 4 );"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"intersect","dir":"Articles","previous_headings":"","what":"INTERSECT","title":"Notes","text":"INTERSECT: join common rows two queries, remove duplicates INTERSECT : keeps duplicates","code":"( SELECT * FROM products ORDER BY price DESC LIMIT 4 ) INTERSECT ( SELECT * FROM products ORDER BY price / weight DESC LIMIT 4 );"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"except","dir":"Articles","previous_headings":"","what":"EXCEPT","title":"Notes","text":"EXCEPT: find rows first query second, remove duplicates EXCEPT : keeps duplicates","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"validation-and-constraints","dir":"Articles","previous_headings":"","what":"Validation and Constraints","title":"Notes","text":"CREATE TABLE ALTER TABLE CREATE TABLE ALTER TABLE CREATE TABLE ALTER TABLE CREATE TABLE ALTER TABLE","code":"CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) NOT NULL,   model VARCHAR(255) NOT NULL ); ALTER TABLE phones ALTER COLUMN manufacturer SET NOT NULL; CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) DEFAULT 'Apple',   model VARCHAR(255) NOT NULL ); ALTER TABLE phones ALTER COLUMN manufacturer SET DEFAULT 'Apple'; CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) NOT NULL,   model VARCHAR(255) NOT NULL UNIQUE ); ALTER TABLE phones ADD UNIQUE(model); CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) NOT NULL,   model VARCHAR(255) NOT NULL,   price NUMERIC CHECK (price > 0) ); ALTER TABLE phones ADD CHECK (price > 0);"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"not-null","dir":"Articles","previous_headings":"","what":"NOT NULL","title":"Notes","text":"CREATE TABLE ALTER TABLE","code":"CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) NOT NULL,   model VARCHAR(255) NOT NULL ); ALTER TABLE phones ALTER COLUMN manufacturer SET NOT NULL;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"default","dir":"Articles","previous_headings":"","what":"DEFAULT","title":"Notes","text":"CREATE TABLE ALTER TABLE","code":"CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) DEFAULT 'Apple',   model VARCHAR(255) NOT NULL ); ALTER TABLE phones ALTER COLUMN manufacturer SET DEFAULT 'Apple';"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"unique","dir":"Articles","previous_headings":"","what":"UNIQUE","title":"Notes","text":"CREATE TABLE ALTER TABLE","code":"CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) NOT NULL,   model VARCHAR(255) NOT NULL UNIQUE ); ALTER TABLE phones ADD UNIQUE(model);"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"check","dir":"Articles","previous_headings":"","what":"CHECK","title":"Notes","text":"CREATE TABLE ALTER TABLE","code":"CREATE TABLE phones (   id SERIAL PRIMARY KEY,   manufacturer VARCHAR(255) NOT NULL,   model VARCHAR(255) NOT NULL,   price NUMERIC CHECK (price > 0) ); ALTER TABLE phones ADD CHECK (price > 0);"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"internals","dir":"Articles","previous_headings":"","what":"Internals","title":"Notes","text":"Size per database:","code":"SELECT datname, pg_database_size(datname) AS bytes FROM pg_database datname  │  bytes ═══════════╪═════════  postgres  │ 7761043  pdiakumis │ 7842963  template1 │ 7842963  template0 │ 7602703  test1     │ 7924883 SHOW data_directory; # /opt/homebrew/var/postgresql@15 # see the dir above for the oid folders SELECT oid, datname FROM pg_database; # shows the individual files within each folder SELECT * FROM pg_class;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"index","dir":"Articles","previous_headings":"","what":"Index","title":"Notes","text":"Create Drop Benchmark Size List indexes database","code":"CREATE INDEX ON cities (name, population); DROP INDEX cities_name_population_idx; EXPLAIN ANALYZE SELECT * FROM users WHERE username = 'Emil30'; SELECT pg_size_pretty(pg_relation_size('users')); SELECT relname, relkind FROM pg_class WHERE relkind = 'i';"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"views","dir":"Articles","previous_headings":"","what":"Views","title":"Notes","text":"Create e.g. 10 15 Drop","code":"CREATE VIEW recent_posts AS (     SELECT * FROM posts     ORDER BY created_at DESC     LIMIT 10 ); CREATE OR REPLACE VIEW recent_posts AS (     SELECT * FROM posts     ORDER BY created_at DESC     LIMIT 15 ); DROP VIEW recent_posts;"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"psql","dir":"Articles","previous_headings":"","what":"psql","title":"Notes","text":"\\c db_name: choose database \\?: help \\l: list databases \\dt: list tables \\d table_name: describe table \\e: open last query EDITOR \\conninfo: connected database “nemo” user “orcabus” via socket “/tmp” port “5432”. \\du: list users","code":""},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"r","dir":"Articles","previous_headings":"","what":"R","title":"Notes","text":"List tables","code":"DBI::dbListObjects(conn, Id(schema = \"mySchemaName\"))"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"schema","dir":"Articles","previous_headings":"","what":"Schema","title":"Notes","text":"","code":"pg_dump --schema-only nemo > schema.txt dm <- dm:::dm_meta_raw(con, NULL) dm$columns tbl <- tibble::tibble(   dracarysId = \"abcd1234\",   foo_num = 123,   foo_dbl = 3.14,   foo_chr = \"foobar\",   foo_int = 35L, ) DBI::dbDataType(DBI::ANSI(), tbl) # dracarysId    foo_num    foo_dbl    foo_chr    foo_int #     \"TEXT\"   \"DOUBLE\"   \"DOUBLE\"     \"TEXT\"      \"INT\" DBI::dbGetInfo(con) |> str() # List of 8 #  $ dbname          : chr \"test1\" #  $ host            : chr \"/tmp\" #  $ port            : chr \"5432\" #  $ username        : chr \"pdiakumis\" #  $ protocol.version: int 3 #  $ server.version  : int 170002 #  $ db.version      : int 170002 #  $ pid             : int 17045"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"dump","dir":"Articles","previous_headings":"","what":"Dump","title":"Notes","text":"","code":"pg_dump --schema-only nemo > schema.txt"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"dm","dir":"Articles","previous_headings":"","what":"dm","title":"Notes","text":"","code":"dm <- dm:::dm_meta_raw(con, NULL) dm$columns"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"dbi","dir":"Articles","previous_headings":"","what":"DBI","title":"Notes","text":"","code":"tbl <- tibble::tibble(   dracarysId = \"abcd1234\",   foo_num = 123,   foo_dbl = 3.14,   foo_chr = \"foobar\",   foo_int = 35L, ) DBI::dbDataType(DBI::ANSI(), tbl) # dracarysId    foo_num    foo_dbl    foo_chr    foo_int #     \"TEXT\"   \"DOUBLE\"   \"DOUBLE\"     \"TEXT\"      \"INT\" DBI::dbGetInfo(con) |> str() # List of 8 #  $ dbname          : chr \"test1\" #  $ host            : chr \"/tmp\" #  $ port            : chr \"5432\" #  $ username        : chr \"pdiakumis\" #  $ protocol.version: int 3 #  $ server.version  : int 170002 #  $ db.version      : int 170002 #  $ pid             : int 17045"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"aws-rds","dir":"Articles","previous_headings":"","what":"AWS RDS","title":"Notes","text":"takes ID (e.g. db-xxxxxx) specified customer, used DNS hostname allocated RDS (e.g. db-xxxxxx.ap-southeast-2.rds.amazonaws.com) DB engine: MySQL, PostgreSQL etc. consists instance type size e.g.: db.m6g type, db.m6g.2xlarge class DB instance storage: General purpose SSD (dev/test), Provisioned IOPS SSD (prod). additional cost Region: physical location e.g. Sydney ap-southeast-2 AZ: availability zone e.g. ap-southeast-2a DB security groups: allow access IP address range EC2 DB monitoring: via CloudWatch Working RDS: console, CLI, RDS APIs Billing: per second, minimum 10min list DB instance classes Postgres: list Postgres versions support db.m7g.large:","code":"aws rds describe-orderable-db-instance-options \\   --engine postgres \\   --engine-version 15.4 \\   --query \"*[].{DBInstanceClass:DBInstanceClass,StorageType:StorageType}|[?StorageType=='gp2']|[].{DBInstanceClass:DBInstanceClass}\" \\   --output text \\   --region ap-southeast-2  ## db.m5.12xlarge ## db.m5.16xlarge ## db.m5.24xlarge ## ... aws rds describe-orderable-db-instance-options \\   --engine postgres \\   --db-instance-class db.m7g.large \\   --query \"*[].{EngineVersion:EngineVersion,StorageType:StorageType}|[?StorageType=='gp2']|[].{EngineVersion:EngineVersion}\" \\   --output text \\   --region ap-southeast-2  ## ... ## 15.4 ## 15.5 ## 16.1 aws ec2 describe-availability-zones --region $AWS_DEFAULT_REGION | jq -r '.AvailabilityZones[].ZoneName' ## ap-southeast-2a ## ap-southeast-2b ## ap-southeast-2c"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"intro","dir":"Articles","previous_headings":"","what":"Intro","title":"Notes","text":"takes ID (e.g. db-xxxxxx) specified customer, used DNS hostname allocated RDS (e.g. db-xxxxxx.ap-southeast-2.rds.amazonaws.com) DB engine: MySQL, PostgreSQL etc. consists instance type size e.g.: db.m6g type, db.m6g.2xlarge class DB instance storage: General purpose SSD (dev/test), Provisioned IOPS SSD (prod). additional cost Region: physical location e.g. Sydney ap-southeast-2 AZ: availability zone e.g. ap-southeast-2a DB security groups: allow access IP address range EC2 DB monitoring: via CloudWatch Working RDS: console, CLI, RDS APIs Billing: per second, minimum 10min","code":""},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"commands","dir":"Articles","previous_headings":"","what":"Commands","title":"Notes","text":"list DB instance classes Postgres: list Postgres versions support db.m7g.large:","code":"aws rds describe-orderable-db-instance-options \\   --engine postgres \\   --engine-version 15.4 \\   --query \"*[].{DBInstanceClass:DBInstanceClass,StorageType:StorageType}|[?StorageType=='gp2']|[].{DBInstanceClass:DBInstanceClass}\" \\   --output text \\   --region ap-southeast-2  ## db.m5.12xlarge ## db.m5.16xlarge ## db.m5.24xlarge ## ... aws rds describe-orderable-db-instance-options \\   --engine postgres \\   --db-instance-class db.m7g.large \\   --query \"*[].{EngineVersion:EngineVersion,StorageType:StorageType}|[?StorageType=='gp2']|[].{EngineVersion:EngineVersion}\" \\   --output text \\   --region ap-southeast-2  ## ... ## 15.4 ## 15.5 ## 16.1 aws ec2 describe-availability-zones --region $AWS_DEFAULT_REGION | jq -r '.AvailabilityZones[].ZoneName' ## ap-southeast-2a ## ap-southeast-2b ## ap-southeast-2c"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"aws-cdk","dir":"Articles","previous_headings":"","what":"AWS CDK","title":"Notes","text":"Project: files folders CDK code. cdk.json: config file bin/infrastructure.ts: application file lib/index.ts: stack file App: application written e.g. TypeScript defines one Stacks. Stack: logical grouping Constructs. Construct: logical grouping Resources. Resource: e.g. S3 buckets, Lambda, DynamoDB. construct class takes three params: scope: construct’s parent/owner; use say stack parent. id: logical ID construct within app; used namespace; unique within scope. props: bundle key-values passed object; can omitted optional. Hub - https://constructs.dev/ https://constructs.dev/packages/aws-cdk-github-oidc https://github.com/aripalo/aws-cdk-github-oidc Library https://docs.aws.amazon.com/cdk/api/v2/docs/aws-construct-library.html L1: low level CFN Resources named CfnXyz e.g. CfnBucket L2: higher level convenient defaults e.g. s3.Bucket L3: patterns help common tasks involving multiple resources e.g. aws-apigateway.LambdaRestApi. Use CfnOutput check cdk synth Use deploy parameter: :","code":"import { CfnOutput } from 'aws-cdk-lib';  const l2bucket = new Bucket(this, 'foo'); new CfnOutput(this, 'output1', {   value: l2bucket.bucketName, }); const duration = new CfnParameter(this, 'duration', {    default: 6,    minValue: 1,    maxValue: 10,    type: 'Number',  });  const l2bucket = new Bucket(this, 'nemo-l2-dev', {    lifecycleRules: [      {        expiration: Duration.days(duration.valueAsNumber),      },    ],  }); cdk deploy --parameters duration=8"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"building-blocks","dir":"Articles","previous_headings":"","what":"Building Blocks","title":"Notes","text":"Project: files folders CDK code. cdk.json: config file bin/infrastructure.ts: application file lib/index.ts: stack file App: application written e.g. TypeScript defines one Stacks. Stack: logical grouping Constructs. Construct: logical grouping Resources. Resource: e.g. S3 buckets, Lambda, DynamoDB.","code":""},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"constructs","dir":"Articles","previous_headings":"","what":"Constructs","title":"Notes","text":"construct class takes three params: scope: construct’s parent/owner; use say stack parent. id: logical ID construct within app; used namespace; unique within scope. props: bundle key-values passed object; can omitted optional. Hub - https://constructs.dev/ https://constructs.dev/packages/aws-cdk-github-oidc https://github.com/aripalo/aws-cdk-github-oidc Library https://docs.aws.amazon.com/cdk/api/v2/docs/aws-construct-library.html L1: low level CFN Resources named CfnXyz e.g. CfnBucket L2: higher level convenient defaults e.g. s3.Bucket L3: patterns help common tasks involving multiple resources e.g. aws-apigateway.LambdaRestApi.","code":""},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"aws-construct-links","dir":"Articles","previous_headings":"","what":"AWS Construct Links","title":"Notes","text":"Hub - https://constructs.dev/ https://constructs.dev/packages/aws-cdk-github-oidc https://github.com/aripalo/aws-cdk-github-oidc Library https://docs.aws.amazon.com/cdk/api/v2/docs/aws-construct-library.html","code":""},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"construct-levels","dir":"Articles","previous_headings":"","what":"Construct Levels","title":"Notes","text":"L1: low level CFN Resources named CfnXyz e.g. CfnBucket L2: higher level convenient defaults e.g. s3.Bucket L3: patterns help common tasks involving multiple resources e.g. aws-apigateway.LambdaRestApi.","code":""},{"path":[]},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"tips","dir":"Articles","previous_headings":"","what":"Tips","title":"Notes","text":"Use CfnOutput check cdk synth Use deploy parameter: :","code":"import { CfnOutput } from 'aws-cdk-lib';  const l2bucket = new Bucket(this, 'foo'); new CfnOutput(this, 'output1', {   value: l2bucket.bucketName, }); const duration = new CfnParameter(this, 'duration', {    default: 6,    minValue: 1,    maxValue: 10,    type: 'Number',  });  const l2bucket = new Bucket(this, 'nemo-l2-dev', {    lifecycleRules: [      {        expiration: Duration.days(duration.valueAsNumber),      },    ],  }); cdk deploy --parameters duration=8"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"pixi","dir":"Articles","previous_headings":"","what":"Pixi","title":"Notes","text":"Pixi awesome - see https://pixi.sh/. pixi.toml TOML file pixi.toml created project directory: dependencies look conda-forge umccr conda channels r-tidywigits, install ./.pixi along dependencies. pixi.lock lock file pixi.lock also created project directory run task pixi run <...>: activate pixi environment behaves like conda environment env prefix: exit:","code":"brew install pixi cd my_projects pixi init hello-world -c conda-forge -c umccr cd hello-world [workspace] authors = [\"pdiakumis <peterdiakumis@gmail.com>\"] channels = [\"conda-forge\", \"umccr\"] name = \"hello-world\" platforms = [\"osx-arm64\"] version = \"0.1.0\"  [tasks]   [dependencies] pixi add r-tidywigits ls -1 .pixi/envs/default/lib/R/library/tidywigits/cli list.R tidy.R tidywigits.R pixi task add tidy \"tidywigits.R\" pixi run tidy --help ✨ Pixi task (tidy): tidywigits.R --help usage: tidywigits.R [-h] [-v] {tidy,list} ...  🐠 WiGiTS Output Tidying 🐢  [...] pixi shell (hello-world) $ ... exit"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Notes","text":"Pixi awesome - see https://pixi.sh/.","code":"brew install pixi"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"project","dir":"Articles","previous_headings":"","what":"Project","title":"Notes","text":"pixi.toml TOML file pixi.toml created project directory: dependencies look conda-forge umccr conda channels r-tidywigits, install ./.pixi along dependencies. pixi.lock lock file pixi.lock also created project directory","code":"cd my_projects pixi init hello-world -c conda-forge -c umccr cd hello-world [workspace] authors = [\"pdiakumis <peterdiakumis@gmail.com>\"] channels = [\"conda-forge\", \"umccr\"] name = \"hello-world\" platforms = [\"osx-arm64\"] version = \"0.1.0\"  [tasks]   [dependencies] pixi add r-tidywigits ls -1 .pixi/envs/default/lib/R/library/tidywigits/cli list.R tidy.R tidywigits.R"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"tasks","dir":"Articles","previous_headings":"","what":"Tasks","title":"Notes","text":"run task pixi run <...>:","code":"pixi task add tidy \"tidywigits.R\" pixi run tidy --help ✨ Pixi task (tidy): tidywigits.R --help usage: tidywigits.R [-h] [-v] {tidy,list} ...  🐠 WiGiTS Output Tidying 🐢  [...]"},{"path":"https://umccr.github.io/nemo/articles/notes.html","id":"environment","dir":"Articles","previous_headings":"","what":"Environment","title":"Notes","text":"activate pixi environment behaves like conda environment env prefix: exit:","code":"pixi shell (hello-world) $ ... exit"},{"path":"https://umccr.github.io/nemo/articles/structure.html","id":"config","dir":"Articles","previous_headings":"","what":"Config","title":"Structure","text":"Config object contains functionality interacting YAML configuration files (inst/config) specify schemas, types, patterns field descriptions raw input files tidy output tbls. See ?Config.","code":""},{"path":"https://umccr.github.io/nemo/articles/structure.html","id":"raw","dir":"Articles","previous_headings":"Config","what":"raw","title":"Structure","text":"intro patterns descriptions versions schemas Let’s look information raw Tool1 config, instance: can access individual fields classic R list-like manner, using $ sign. Patterns used fish relevant files directory listing. Tool1 raw file patterns. File descriptions based available open source documentation. Tool1 raw file descriptions. Versions used distinguish changes schema individual tool versions. example, Tool1 v1.2.3 metrics Y Z added table1, reflected available schemas. now using latest default version based recent schema tests, discrepancies see labelled accordingly version tool generated file different schema. Tool1 raw file versions. raw schemas specify column name type (e.g. character (c), integer (), float/double (d)) input file:","code":"tool <- params$tool workflow <- params$workflow conf <- Config$new(tool, pkg = \"nemo\") conf ## #--- Config tool1 ---# ##  ## |var   |value | ## |:-----|:-----| ## |tool  |tool1 | ## |nraw  |4     | ## |ntidy |4     | conf$get_raw_patterns() |>   knitr::kable(caption = glue(\"{tool} raw file patterns.\")) conf$get_raw_descriptions() |>   knitr::kable(caption = glue(\"{tool} raw file descriptions.\")) conf$get_raw_versions() |>   knitr::kable(caption = glue(\"{tool} raw file versions.\")) (s <- conf$get_raw_schemas_all()) ## # A tibble: 4 × 3 ##   name   version schema           ##   <chr>  <chr>   <list>           ## 1 table1 v1.2.3  <tibble [5 × 2]> ## 2 table1 latest  <tibble [7 × 2]> ## 3 table2 latest  <tibble [3 × 2]> ## 4 table3 latest  <tibble [2 × 2]> s |>   dplyr::filter(name == \"table1\", version == \"v1.2.3\") |>   dplyr::select(\"schema\") |>   tidyr::unnest(\"schema\") ## # A tibble: 5 × 2 ##   field      type  ##   <chr>      <chr> ## 1 SampleID   c     ## 2 Chromosome c     ## 3 Start      i     ## 4 End        i     ## 5 metricX    d"},{"path":"https://umccr.github.io/nemo/articles/structure.html","id":"tidy","dir":"Articles","previous_headings":"Config","what":"tidy","title":"Structure","text":"intro descriptions schemas Now let’s look information tidy Tool1 config. difference raw tidy configs mostly column names (standardised lowercase separated underscores, .e. snake_case), raw files get split multiple tidy tables (e.g. normalisation purposes). Tidy descriptions raw descriptions now. Tool1 tidy file descriptions.","code":"conf$get_tidy_descriptions() |>   knitr::kable(caption = glue(\"{tool} tidy file descriptions.\")) (s <- conf$get_tidy_schemas_all()) ## # A tibble: 4 × 4 ##   name   version tbl   schema           ##   <chr>  <chr>   <chr> <list>           ## 1 table1 v1.2.3  tbl1  <tibble [5 × 3]> ## 2 table1 latest  tbl1  <tibble [7 × 3]> ## 3 table2 latest  tbl1  <tibble [3 × 3]> ## 4 table3 latest  tbl1  <tibble [5 × 3]> s |>   dplyr::filter(.data$name == \"table1\", version == \"v1.2.3\") |>   dplyr::select(\"schema\") |>   tidyr::unnest(\"schema\") ## # A tibble: 5 × 3 ##   field      type  description    ##   <chr>      <chr> <chr>          ## 1 sample_id  c     sample ID      ## 2 chromosome c     chromosome     ## 3 start      i     start position ## 4 end        i     end position   ## 5 metric_x   d     metric X"},{"path":"https://umccr.github.io/nemo/articles/structure.html","id":"tool","dir":"Articles","previous_headings":"","what":"Tool","title":"Structure","text":"Tool main organisation class file parsers tidiers. contains functions parsing tidying typical CSV/TSV files (column names), TXT files column names missing. Currently utilises simple readr::read_delim function {readr} package reads data memory. See ?Tool. simple parsers used 80-90% cases, future can optimise parsing needed faster packages {data.table}, {duckdb-r}/{duckplyr} {r-polars}. initialise config list tidy filter write nemofy can different Tool children classes inherit (override) functions fields Tool parent class. example, can create Tool object Tool1 follows: Initialise Tool1 object: Config object also constructed based name supplied - used internally find files interest infer schemas: can list files can parsed list_files(): can parse tidy files interest using tidy function. Note function called object assigned anywhere: can also focus subset files tidy using filter_files() function. include exclude arguments can specify parsers include exclude analysis: tidying data interest, can write tidy tibbles various formats, like Apache Parquet, PostgreSQL, CSV/TSV R’s RDS. can see id specified added written files additional nemo_id column. can used e.g. distinguish results different runs data pipeline. writing database like PostgreSQL, another column nemo_pfix used distinguish results run tool. nemofy function convenient wrapper process filtering, tidying, writing.","code":"tool1_path <- system.file(\"extdata/tool1\", package = \"nemo\") t1 <- nemo::Tool1$new(path = tool1_path) # each class comes with a print function t1 ## #--- Tool tool1 ---# ##  ## |var    |value                                                                     | ## |:------|:-------------------------------------------------------------------------| ## |name   |tool1                                                                     | ## |path   |/home/runner/miniconda3/envs/pkgdown_env/lib/R/library/nemo/extdata/tool1 | ## |files  |4                                                                         | ## |tidied |FALSE                                                                     | t1$config ## #--- Config tool1 ---# ##  ## |var   |value | ## |:-----|:-----| ## |tool  |tool1 | ## |nraw  |4     | ## |ntidy |4     | t1$config$get_raw_patterns() ## # A tibble: 3 × 2 ##   name   value                      ##   <chr>  <chr>                      ## 1 table1 \"\\\\.tool1\\\\.table1\\\\.tsv$\" ## 2 table2 \"\\\\.tool1\\\\.table2\\\\.tsv$\" ## 3 table3 \"\\\\.tool1\\\\.table3\\\\.tsv$\" t1$config$get_raw_schema(\"table1\", v = \"v1.2.3\") ## # A tibble: 5 × 2 ##   field      type  ##   <chr>      <chr> ## 1 SampleID   c     ## 2 Chromosome c     ## 3 Start      i     ## 4 End        i     ## 5 metricX    d # t1$config$get_raw_schema(\"table1\", v = \"latest\") # default t1$config$get_tidy_schema(\"table1\", v = \"v1.2.3\") ## # A tibble: 5 × 3 ##   field      type  description    ##   <chr>      <chr> <chr>          ## 1 sample_id  c     sample ID      ## 2 chromosome c     chromosome     ## 3 start      i     start position ## 4 end        i     end position   ## 5 metric_x   d     metric X # t1$config$get_tidy_schema(\"table1\", v = \"latest\") # default (lf <- t1$list_files()) ## # A tibble: 4 × 10 ##   tool_parser  parser bname             size lastmodified        path  pattern prefix schema   group ##   <glue>       <chr>  <chr>            <fs:> <dttm>              <chr> <chr>   <glue> <list>   <glu> ## 1 tool1_table1 table1 sampleA.tool1.t…   113 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble>       ## 2 tool1_table1 table1 sampleA.tool1.t…   153 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble> _2    ## 3 tool1_table2 table2 sampleA.tool1.t…    70 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble>       ## 4 tool1_table3 table3 sampleA.tool1.t…    83 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble> lf |> dplyr::slice(1) |> str() ## tibble [1 × 10] (S3: tbl_df/tbl/data.frame) ##  $ tool_parser : 'glue' chr \"tool1_table1\" ##  $ parser      : chr \"table1\" ##  $ bname       : chr \"sampleA.tool1.table1.tsv\" ##  $ size        : 'fs_bytes' num 113 ##  $ lastmodified: POSIXct[1:1], format: \"2025-09-07 11:31:27\" ##  $ path        : chr \"/home/runner/miniconda3/envs/pkgdown_env/lib/R/library/nemo/extdata/tool1/v1.2.3/sampleA.tool1.table1.tsv\" ##  $ pattern     : chr \"\\\\.tool1\\\\.table1\\\\.tsv$\" ##  $ prefix      : 'glue' chr \"sampleA\" ##  $ schema      :List of 1 ##   ..$ : tibble [7 × 2] (S3: tbl_df/tbl/data.frame) ##   .. ..$ field: chr [1:7] \"SampleID\" \"Chromosome\" \"Start\" \"End\" ... ##   .. ..$ type : chr [1:7] \"c\" \"c\" \"i\" \"i\" ... ##  $ group       : 'glue' chr \"\" # this will create a new field tbls containing the tidy data (and optionally # the 'raw' parsed data) t1$tidy(tidy = TRUE, keep_raw = TRUE) t1$tbls ## # A tibble: 4 × 11 ##   tool_parser  parser bname    size lastmodified        path  pattern prefix group raw      tidy     ##   <glue>       <chr>  <chr>   <fs:> <dttm>              <chr> <chr>   <glue> <glu> <list>   <list>   ## 1 tool1_table1 table1 sample…   113 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl…       <tibble> <tibble> ## 2 tool1_table1 table1 sample…   153 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… _2    <tibble> <tibble> ## 3 tool1_table2 table2 sample…    70 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl…       <tibble> <tibble> ## 4 tool1_table3 table3 sample…    83 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl…       <tibble> <tibble> t1$tbls$raw[[1]] |> dplyr::glimpse() ## Rows: 3 ## Columns: 5 ## $ SampleID   <chr> \"sampleA\", \"sampleA\", \"sampleA\" ## $ Chromosome <chr> \"chr1\", \"chr2\", \"chr3\" ## $ Start      <int> 10, 100, 1000 ## $ End        <int> 50, 500, 5000 ## $ metricX    <dbl> 0.1, 0.2, 0.3 # the tidy tibbles are nested to allow for more than one tidy tibble per file t1$tbls$tidy[[1]][[\"data\"]][[1]] |> dplyr::glimpse() ## Rows: 3 ## Columns: 5 ## $ sample_id  <chr> \"sampleA\", \"sampleA\", \"sampleA\" ## $ chromosome <chr> \"chr1\", \"chr2\", \"chr3\" ## $ start      <int> 10, 100, 1000 ## $ end        <int> 50, 500, 5000 ## $ metric_x   <dbl> 0.1, 0.2, 0.3 # create new Tool1 object t2 <- nemo::Tool1$new(path = tool1_path) t2$files ## # A tibble: 4 × 10 ##   tool_parser  parser bname             size lastmodified        path  pattern prefix schema   group ##   <glue>       <chr>  <chr>            <fs:> <dttm>              <chr> <chr>   <glue> <list>   <glu> ## 1 tool1_table1 table1 sampleA.tool1.t…   113 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble>       ## 2 tool1_table1 table1 sampleA.tool1.t…   153 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble> _2    ## 3 tool1_table2 table2 sampleA.tool1.t…    70 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble>       ## 4 tool1_table3 table3 sampleA.tool1.t…    83 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble> t2$filter_files(include = c(\"tool1_table2\", \"tool1_table3\")) t2$files ## # A tibble: 2 × 10 ##   tool_parser  parser bname             size lastmodified        path  pattern prefix schema   group ##   <glue>       <chr>  <chr>            <fs:> <dttm>              <chr> <chr>   <glue> <list>   <glu> ## 1 tool1_table2 table2 sampleA.tool1.t…    70 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble>       ## 2 tool1_table3 table3 sampleA.tool1.t…    83 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble> t2$tidy() # first need to tidy outdir1 <- tempdir() fmt <- \"csv\" t2$write(odir = outdir1, format = fmt, id = \"run123\") wfiles <- fs::dir_info(outdir1) |> dplyr::select(1:5) wfiles |>   dplyr::mutate(bname = basename(.data$path)) |>   dplyr::select(\"bname\", \"size\", \"type\") ## # A tibble: 18 × 3 ##    bname                                 size type  ##    <chr>                          <fs::bytes> <fct> ##  1 file1024203e0f91                     4.71K file  ##  2 file10242373d764                     4.71K file  ##  3 file102423dfc60f                     4.71K file  ##  4 file10242f19d839                     4.71K file  ##  5 file10243d31f065                     4.71K file  ##  6 file10243f4d5f95                     4.71K file  ##  7 file102443a8ffb5                     4.71K file  ##  8 file102449470e3                      4.71K file  ##  9 file102452f240a2                     4.71K file  ## 10 file102457d7c570                     4.71K file  ## 11 file102468fa39de                     4.71K file  ## 12 file10246e61f0bf                     4.71K file  ## 13 file1024719fbfdc                     4.71K file  ## 14 file10247725bdc7                     4.71K file  ## 15 file1024780b0fb4                     4.71K file  ## 16 rmarkdown-str1024718413c4.html       1.13K file  ## 17 sampleA_tool1_table2.csv.gz             80 file  ## 18 sampleA_tool1_table3.csv.gz             92 file # readr::read_csv(wfiles$path[1], show_col_types = F) # see bug #137 t3 <- nemo::Tool1$new(path = tool1_path) outdir2 <- file.path(tempdir(), \"t3\") |> fs::dir_create() t3$files ## # A tibble: 4 × 10 ##   tool_parser  parser bname             size lastmodified        path  pattern prefix schema   group ##   <glue>       <chr>  <chr>            <fs:> <dttm>              <chr> <chr>   <glue> <list>   <glu> ## 1 tool1_table1 table1 sampleA.tool1.t…   113 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble>       ## 2 tool1_table1 table1 sampleA.tool1.t…   153 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble> _2    ## 3 tool1_table2 table2 sampleA.tool1.t…    70 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble>       ## 4 tool1_table3 table3 sampleA.tool1.t…    83 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble> t3$nemofy(   odir = outdir2,   format = \"tsv\",   id = \"run_t3\" ) wfiles2 <- fs::dir_info(outdir2) |>   dplyr::mutate(bname = basename(.data$path)) wfiles2 |>   dplyr::select(\"bname\", \"size\", \"type\") ## # A tibble: 4 × 3 ##   bname                                size type  ##   <chr>                         <fs::bytes> <fct> ## 1 sampleA_2_tool1_table1.tsv.gz         124 file  ## 2 sampleA_tool1_table1.tsv.gz           105 file  ## 3 sampleA_tool1_table2.tsv.gz            80 file  ## 4 sampleA_tool1_table3.tsv.gz            92 file readr::read_tsv(wfiles2$path[2], show_col_types = F) ## # A tibble: 3 × 6 ##   nemo_id sample_id chromosome start   end metric_x ##   <chr>   <chr>     <chr>      <dbl> <dbl>    <dbl> ## 1 run_t3  sampleA   chr1          10    50      0.1 ## 2 run_t3  sampleA   chr2         100   500      0.2 ## 3 run_t3  sampleA   chr3        1000  5000      0.3"},{"path":"https://umccr.github.io/nemo/articles/structure.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Structure","text":"Workflow consists list one Tools. can construct certain Workflow different Tools, allow parsing writing tidy tables variety bioinformatic tools. See ?Workflow. example, {nemo} contains Workflow1 class Workflow child (containing single Tool1 simplicity). Similarly Tool, Workflow object contains functions filter_files, list_files, tidy, write nemofy:","code":"w <- system.file(\"extdata/tool1\", package = \"nemo\") |>   nemo::Workflow1$new() outdir3 <- file.path(tempdir(), \"oa\") |> fs::dir_create() w$list_files() ## # A tibble: 4 × 10 ##   tool_parser  parser bname             size lastmodified        path  pattern prefix schema   group ##   <glue>       <chr>  <chr>            <fs:> <dttm>              <chr> <chr>   <glue> <list>   <glu> ## 1 tool1_table1 table1 sampleA.tool1.t…   113 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble>       ## 2 tool1_table1 table1 sampleA.tool1.t…   153 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble> _2    ## 3 tool1_table2 table2 sampleA.tool1.t…    70 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble>       ## 4 tool1_table3 table3 sampleA.tool1.t…    83 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… <tibble> x <- w$nemofy(   odir = outdir3,   format = \"tsv\",   id = \"workflow1_run1\" ) wfiles3 <- fs::dir_info(outdir3) |>   dplyr::select(1:5) |>   dplyr::mutate(bname = basename(.data$path)) wfiles3 |>   dplyr::select(\"bname\", \"size\", \"type\") ## # A tibble: 4 × 3 ##   bname                                size type  ##   <chr>                         <fs::bytes> <fct> ## 1 sampleA_2_tool1_table1.tsv.gz         133 file  ## 2 sampleA_tool1_table1.tsv.gz           111 file  ## 3 sampleA_tool1_table2.tsv.gz            88 file  ## 4 sampleA_tool1_table3.tsv.gz           100 file readr::read_tsv(wfiles3$path[1], show_col_types = F) ## # A tibble: 3 × 8 ##   nemo_id        sample_id chromosome start   end metric_x metric_y metric_z ##   <chr>          <chr>     <chr>      <dbl> <dbl>    <dbl>    <dbl>    <dbl> ## 1 workflow1_run1 sampleA   chr1          10    50      0.1      0.4      0.7 ## 2 workflow1_run1 sampleA   chr2         100   500      0.2      0.5      0.8 ## 3 workflow1_run1 sampleA   chr3        1000  5000      0.3      0.6      0.9"},{"path":[]},{"path":"https://umccr.github.io/nemo/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Peter Diakumis. Author, maintainer.","code":""},{"path":"https://umccr.github.io/nemo/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Diakumis P (2025). nemo: Tidy explore outputs bioinformatic pipelines. R package version 0.0.0.9003, https://umccr.github.io/nemo/, https://github.com/umccr/nemo.","code":"@Manual{,   title = {nemo: Tidy and explore outputs from bioinformatic pipelines},   author = {Peter Diakumis},   year = {2025},   note = {R package version 0.0.0.9003, https://umccr.github.io/nemo/},   url = {https://github.com/umccr/nemo}, }"},{"path":"https://umccr.github.io/nemo/index.html","id":"turtle-tidy-and-explore-bioinformatic-pipeline-outputs","dir":"","previous_headings":"","what":"Tidy Bioinformatic Pipeline Outputs","title":"Tidy Bioinformatic Pipeline Outputs","text":"Installation R6 structure Changelog","code":""},{"path":"https://umccr.github.io/nemo/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Tidy Bioinformatic Pipeline Outputs","text":"{nemo} R package contains building blocks parsing, tidying, writing bioinformatic pipeline results consistent structure. short, traverses directory containing results one runs certain bioinformatic tools, parses files recognises, tidies (includes data reshaping, normalisation, column name cleanup etc.), writes output format choice e.g. Apache Parquet, PostgreSQL, TSV, RDS. specific tools can handle controlled configuration files written YAML part ‘child’ {nemo} packages, like {tidywigits} {dracarys}. configuration files (inst/config respective packages) specify schemas, types, patterns field descriptions raw input files tidy output tbls.","code":""},{"path":"https://umccr.github.io/nemo/index.html","id":"pizza-installation","dir":"","previous_headings":"","what":"🍕 Installation","title":"Tidy Bioinformatic Pipeline Outputs","text":"Using {remotes} directly GitHub: Alternatively: conda package: https://anaconda.org/umccr/r-nemo details see: https://umccr.github.io/nemo/articles/installation","code":"install.packages(\"remotes\") remotes::install_github(\"umccr/nemo\") # latest main commit remotes::install_github(\"umccr/nemo@v0.0.0.9002\") # released version"},{"path":"https://umccr.github.io/nemo/index.html","id":"cyclone-cli","dir":"","previous_headings":"","what":"🌀 CLI","title":"Tidy Bioinformatic Pipeline Outputs","text":"nemo.R command line interface available convenience. ’re using conda package, nemo.R command already available inside activated conda environment. ’re using conda package, need export nemo/inst/cli/ directory PATH order use nemo.R.","code":"nemo_cli=$(Rscript -e 'x = system.file(\"cli\", package = \"nemo\"); cat(x, \"\\n\")' | xargs) export PATH=\"${nemo_cli}:${PATH}\" $ nemo.R --version nemo 0.0.0.9002  #-----------------------------------# $ nemo.R --help usage: nemo.R [-h] [-v] {tidy,list} ...  Tidy Bioinformatic Workflows  positional arguments:   {tidy,list}    sub-command help     tidy         Tidy Workflow Outputs     list         List Parsable Workflow Outputs  options:   -h, --help     show this help message and exit   -v, --version  show program's version number and exit ' #-----------------------------------# $ nemo.R tidy --help usage: nemo.R tidy [-h] -w WORKFLOW -d IN_DIR [-o OUT_DIR] [-f FORMAT] -i ID                    [--dbname DBNAME] [--dbuser DBUSER] [--include INCLUDE]                    [--exclude EXCLUDE] [-q]  options:   -h, --help            show this help message and exit   -w WORKFLOW, --workflow WORKFLOW                         Workflow name.   -d IN_DIR, --in_dir IN_DIR                         Input directory.   -o OUT_DIR, --out_dir OUT_DIR                         Output directory.   -f FORMAT, --format FORMAT                         Format of output [def: parquet] (parquet, db, tsv,                         csv, rds)   -i ID, --id ID        ID to use for this run.   --dbname DBNAME       Database name.   --dbuser DBUSER       Database user.   --include INCLUDE     Include only these files (comma,sep).   --exclude EXCLUDE     Exclude these files (comma,sep).   -q, --quiet           Shush all the logs.  #-----------------------------------# $ nemo.R list --help usage: nemo.R list [-h] -w WORKFLOW -d IN_DIR [-f FORMAT] [-q]  options:   -h, --help            show this help message and exit   -w WORKFLOW, --workflow WORKFLOW                         Workflow name.   -d IN_DIR, --in_dir IN_DIR                         Input directory.   -f FORMAT, --format FORMAT                         Format of list output [def: pretty] (tsv, pretty)   -q, --quiet           Shush all the logs."},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":null,"dir":"Reference","previous_headings":"","what":"Config Object — Config","title":"Config Object — Config","text":"Config YAML file parsing.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Config Object — Config","text":"tool (character(1)) Tool name. config (list()) Config list. raw_schemas_all (tibble()) raw schemas tool. tidy_schemas_all (tibble()) tidy schemas tool.","code":""},{"path":[]},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Config Object — Config","text":"Config$new() Config$print() Config$read() Config$get_raw_patterns() Config$get_raw_versions() Config$get_raw_descriptions() Config$get_raw_schemas_all() Config$get_raw_schema() Config$are_raw_schemas_valid() Config$get_tidy_descriptions() Config$get_tidy_schemas_all() Config$get_tidy_schema() Config$clone()","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Config Object — Config","text":"Create new Config object.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$new(tool, pkg)"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Config Object — Config","text":"tool (character(1)) Tool name. pkg (character(1)) Package name config lookup.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Config Object — Config","text":"Print details Tool.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$print(...)"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Config Object — Config","text":"... (ignored).","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-read-","dir":"Reference","previous_headings":"","what":"Method read()","title":"Config Object — Config","text":"Read YAML configs.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$read(pkg)"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Config Object — Config","text":"pkg (character(1)) Package name config files located.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Config Object — Config","text":"list() parsed data.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-get-raw-patterns-","dir":"Reference","previous_headings":"","what":"Method get_raw_patterns()","title":"Config Object — Config","text":"Return output file patterns.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$get_raw_patterns()"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-get-raw-versions-","dir":"Reference","previous_headings":"","what":"Method get_raw_versions()","title":"Config Object — Config","text":"Return output file schema versions.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$get_raw_versions()"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-get-raw-descriptions-","dir":"Reference","previous_headings":"","what":"Method get_raw_descriptions()","title":"Config Object — Config","text":"Return output file descriptions.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$get_raw_descriptions()"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-get-raw-schemas-all-","dir":"Reference","previous_headings":"","what":"Method get_raw_schemas_all()","title":"Config Object — Config","text":"Return output file schemas.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$get_raw_schemas_all()"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-get-raw-schema-","dir":"Reference","previous_headings":"","what":"Method get_raw_schema()","title":"Config Object — Config","text":"Get raw file schema.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$get_raw_schema(x, v = \"latest\")"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Config Object — Config","text":"x (character(1)) Raw file name. v (character(1)) Version (def: latest).","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-are-raw-schemas-valid-","dir":"Reference","previous_headings":"","what":"Method are_raw_schemas_valid()","title":"Config Object — Config","text":"Validate schema.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$are_raw_schemas_valid()"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-get-tidy-descriptions-","dir":"Reference","previous_headings":"","what":"Method get_tidy_descriptions()","title":"Config Object — Config","text":"Return tidy tibble descriptions.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$get_tidy_descriptions()"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-get-tidy-schemas-all-","dir":"Reference","previous_headings":"","what":"Method get_tidy_schemas_all()","title":"Config Object — Config","text":"Return tidy tibble schemas.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$get_tidy_schemas_all()"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-get-tidy-schema-","dir":"Reference","previous_headings":"","what":"Method get_tidy_schema()","title":"Config Object — Config","text":"Get tidy tbl schema.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$get_tidy_schema(x, v = \"latest\", subtbl = \"tbl1\")"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Config Object — Config","text":"x (character(1)) Tidy tbl name. v (character(1)) Version schema (def: latest). subtbl (character(1)) Subtbl use (def: tbl1).","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Config Object — Config","text":"objects class cloneable method.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Config Object — Config","text":"","code":"Config$clone(deep = FALSE)"},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Config Object — Config","text":"deep Whether make deep clone.","code":""},{"path":"https://umccr.github.io/nemo/reference/Config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Config Object — Config","text":"","code":"tool <- \"tool1\" pkg <- \"nemo\" conf <- Config$new(tool, pkg) conf$get_raw_patterns() #> # A tibble: 3 × 2 #>   name   value                      #>   <chr>  <chr>                      #> 1 table1 \"\\\\.tool1\\\\.table1\\\\.tsv$\" #> 2 table2 \"\\\\.tool1\\\\.table2\\\\.tsv$\" #> 3 table3 \"\\\\.tool1\\\\.table3\\\\.tsv$\" (rv1 <- conf$get_raw_versions()) #> # A tibble: 4 × 2 #>   name   value  #>   <chr>  <chr>  #> 1 table1 v1.2.3 #> 2 table1 latest #> 3 table2 latest #> 4 table3 latest conf$get_raw_descriptions() #> # A tibble: 3 × 2 #>   name   value             #>   <chr>  <chr>             #> 1 table1 Table1 for tool1. #> 2 table2 Table2 for tool1. #> 3 table3 Table3 for tool1. conf$get_raw_schemas_all() #> # A tibble: 4 × 3 #>   name   version schema           #>   <chr>  <chr>   <list>           #> 1 table1 v1.2.3  <tibble [5 × 2]> #> 2 table1 latest  <tibble [7 × 2]> #> 3 table2 latest  <tibble [3 × 2]> #> 4 table3 latest  <tibble [2 × 2]> conf$get_raw_schema(\"table1\") #> # A tibble: 7 × 2 #>   field      type  #>   <chr>      <chr> #> 1 SampleID   c     #> 2 Chromosome c     #> 3 Start      i     #> 4 End        i     #> 5 metricX    d     #> 6 metricY    d     #> 7 metricZ    d     conf$get_raw_schema(\"table1\", v = \"v1.2.3\") #> # A tibble: 5 × 2 #>   field      type  #>   <chr>      <chr> #> 1 SampleID   c     #> 2 Chromosome c     #> 3 Start      i     #> 4 End        i     #> 5 metricX    d     conf$are_raw_schemas_valid() #> [1] TRUE conf$get_tidy_descriptions() #> # A tibble: 3 × 2 #>   name   value             #>   <chr>  <chr>             #> 1 table1 Table1 for tool1. #> 2 table2 Table2 for tool1. #> 3 table3 Table3 for tool1. (ts1 <- conf$get_tidy_schemas_all()) #> # A tibble: 4 × 4 #>   name   version tbl   schema           #>   <chr>  <chr>   <chr> <list>           #> 1 table1 v1.2.3  tbl1  <tibble [5 × 3]> #> 2 table1 latest  tbl1  <tibble [7 × 3]> #> 3 table2 latest  tbl1  <tibble [3 × 3]> #> 4 table3 latest  tbl1  <tibble [5 × 3]> conf$get_tidy_schema(\"table1\") #> # A tibble: 7 × 3 #>   field      type  description    #>   <chr>      <chr> <chr>          #> 1 sample_id  c     sample ID      #> 2 chromosome c     chromosome     #> 3 start      i     start position #> 4 end        i     end position   #> 5 metric_x   d     metric X       #> 6 metric_y   d     metric Y       #> 7 metric_z   d     metric Z       conf$get_tidy_schema(\"table1\", v = \"v1.2.3\") #> # A tibble: 5 × 3 #>   field      type  description    #>   <chr>      <chr> <chr>          #> 1 sample_id  c     sample ID      #> 2 chromosome c     chromosome     #> 3 start      i     start position #> 4 end        i     end position   #> 5 metric_x   d     metric X"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":null,"dir":"Reference","previous_headings":"","what":"Tool Object — Tool","title":"Tool Object — Tool","text":"Base class nemo tools.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Tool Object — Tool","text":"name (character(1)) Name tool. path (character(1)) Output directory tool. config (Config()) Config tool. files (tibble()) Tibble files matching available Tool patterns. tbls (tibble()) Tibble tidy tibbles. raw_schemas_all (tibble()) raw schemas tool. tidy_schemas_all (tibble()) tidy schemas tool. get_tidy_schema (function()) Get specific tidy schema. get_raw_schema (function()) Get specific raw schema. files_tbl (tibble(n)) Tibble files list_files_dir().","code":""},{"path":[]},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tool Object — Tool","text":"Tool$new() Tool$print() Tool$filter_files() Tool$list_files() Tool$.parse_file() Tool$.tidy_file() Tool$.parse_file_nohead() Tool$.eval_func() Tool$tidy() Tool$write() Tool$nemofy() Tool$clone()","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tool Object — Tool","text":"Create new Tool object.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$new(name = NULL, pkg = NULL, path = NULL, files_tbl = NULL)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"name (character(1)) Name tool. pkg (character(1)) Package name tool belong (config lookup). path (character(1)) Output directory tool. files_tbl supplied, basically gets ignored. files_tbl (tibble(n)) Tibble files list_files_dir().","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Tool Object — Tool","text":"Print details Tool.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$print(...)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"... (ignored).","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"self invisibly.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-filter-files-","dir":"Reference","previous_headings":"","what":"Method filter_files()","title":"Tool Object — Tool","text":"Filter files given tool directory.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$filter_files(include = NULL, exclude = NULL)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"include (character(n)) Files include. exclude (character(n)) Files exclude.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"tibble files potentially removed rows.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-list-files-","dir":"Reference","previous_headings":"","what":"Method list_files()","title":"Tool Object — Tool","text":"List files given tool directory.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$list_files(type = \"file\")"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"type (character(1)) File type(s) return (e.g. , file, directory, symlink). See fs::dir_info.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"tibble file paths.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-parse-file-","dir":"Reference","previous_headings":"","what":"Method .parse_file()","title":"Tool Object — Tool","text":"Parse file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$.parse_file(x, name, delim = \"\\t\", ...)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"x (character(1)) File path. name (character(1)) Parser name (e.g. \"breakends\" - see docs). delim (character(1)) File delimiter. ... Passed readr::read_delim.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"tibble parsed data.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-tidy-file-","dir":"Reference","previous_headings":"","what":"Method .tidy_file()","title":"Tool Object — Tool","text":"Tidy file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$.tidy_file(x, name, convert_types = FALSE)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"x (character(1) tibble()) File path already parsed raw tibble. name (character(1)) Parser name (e.g. \"breakends\" - see docs). convert_types (logical(1)) Convert field types based schema.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"tibble tidy data enframed.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-parse-file-nohead-","dir":"Reference","previous_headings":"","what":"Method .parse_file_nohead()","title":"Tool Object — Tool","text":"Parse headless file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$.parse_file_nohead(x, pname, delim = \"\\t\", ...)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"x (character(1)) File path. pname (character(1)) Parser name (e.g. \"breakends\" - see docs). delim (character(1)) File delimiter. ... Passed readr::read_delim.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"tibble parsed data.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-eval-func-","dir":"Reference","previous_headings":"","what":"Method .eval_func()","title":"Tool Object — Tool","text":"Evaluate function context Tool's environment.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$.eval_func(fun, envir = self)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"fun (character(1)) Function Tool evaluate. envir (environment()) Environment evaluate function within.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"evaluated function.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-tidy-","dir":"Reference","previous_headings":"","what":"Method tidy()","title":"Tool Object — Tool","text":"Tidy list files.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$tidy(tidy = TRUE, keep_raw = FALSE)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"tidy (logical(1)) raw parsed tibbles get tidied? keep_raw (logical(1)) raw parsed tibbles kept final output?","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"self invisibly.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-write-","dir":"Reference","previous_headings":"","what":"Method write()","title":"Tool Object — Tool","text":"Write tidy tibbles.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$write(odir = \".\", format = \"tsv\", id = NULL, dbconn = NULL)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"odir (character(1)) Directory path output tidy files. Ignored format db. format (character(1)) Format output files. id (character(1)) ID use dataset (e.g. wfrid.123, prid.456). dbconn (DBIConnection) Database connection object (see DBI::dbConnect).","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"tibble tidy data output location prefix.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-nemofy-","dir":"Reference","previous_headings":"","what":"Method nemofy()","title":"Tool Object — Tool","text":"Parse, filter, tidy write files.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$nemofy(   odir = \".\",   format = \"tsv\",   id = NULL,   dbconn = NULL,   include = NULL,   exclude = NULL )"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"odir (character(1)) Directory path output tidy files. format (character(1)) Format output files. id (character(1)) ID use dataset (e.g. wfrid.123, prid.456). dbconn (DBIConnection) Database connection object (see DBI::dbConnect). include (character(n)) Files include. exclude (character(n)) Files exclude.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"Tool Object — Tool","text":"tibble tidy data output location prefix.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tool Object — Tool","text":"objects class cloneable method.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool Object — Tool","text":"","code":"Tool$clone(deep = FALSE)"},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool Object — Tool","text":"deep Whether make deep clone.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tool Object — Tool","text":"","code":"if (FALSE) { # \\dontrun{ path <- here::here(\"inst/extdata/tool1\") x <- Tool$new(\"tool1\", pkg = \"nemo\", path = path) # demo filter + tidy x <- Tool1$new(path = path)$   filter_files(exclude = \"alignments_dupfreq\")$   tidy(keep_raw = TRUE) a$tbls a$files a$list_files() lx <- Linx$new(path) dbconn <- DBI::dbConnect(   drv = RPostgres::Postgres(),   dbname = \"nemo\",   user = \"orcabus\" ) lx$nemofy(     odir = \"nogit/test_data\",     format = \"db\", # \"parquet\",     id = \"run2\",     dbconn = dbconn,     include = NULL,     exclude = NULL ) DBI::dbDisconnect(dbconn) } # }"},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":null,"dir":"Reference","previous_headings":"","what":"Tool1 Object — Tool1","title":"Tool1 Object — Tool1","text":"Tool1 file parsing manipulation.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Tool1 Object — Tool1","text":"nemo::Tool -> Tool1","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Tool1 Object — Tool1","text":"nemo::Tool$.eval_func() nemo::Tool$.parse_file() nemo::Tool$.parse_file_nohead() nemo::Tool$.tidy_file() nemo::Tool$filter_files() nemo::Tool$list_files() nemo::Tool$nemofy() nemo::Tool$print() nemo::Tool$tidy() nemo::Tool$write()","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Tool1 Object — Tool1","text":"Tool1$new() Tool1$parse_table1() Tool1$tidy_table1() Tool1$parse_table2() Tool1$tidy_table2() Tool1$parse_table3() Tool1$tidy_table3() Tool1$clone()","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Tool1 Object — Tool1","text":"Create new Tool1 object.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool1 Object — Tool1","text":"","code":"Tool1$new(path = NULL, files_tbl = NULL)"},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool1 Object — Tool1","text":"path (character(1)) Output directory tool. files_tbl supplied, basically gets ignored. files_tbl (tibble(n)) Tibble files list_files_dir().","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"method-parse-table-","dir":"Reference","previous_headings":"","what":"Method parse_table1()","title":"Tool1 Object — Tool1","text":"Read table1.tsv file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool1 Object — Tool1","text":"","code":"Tool1$parse_table1(x)"},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool1 Object — Tool1","text":"x (character(1)) Path file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"method-tidy-table-","dir":"Reference","previous_headings":"","what":"Method tidy_table1()","title":"Tool1 Object — Tool1","text":"Tidy table1.tsv file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool1 Object — Tool1","text":"","code":"Tool1$tidy_table1(x)"},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool1 Object — Tool1","text":"x (character(1)) Path file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"method-parse-table--1","dir":"Reference","previous_headings":"","what":"Method parse_table2()","title":"Tool1 Object — Tool1","text":"Read table2.tsv file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool1 Object — Tool1","text":"","code":"Tool1$parse_table2(x)"},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool1 Object — Tool1","text":"x (character(1)) Path file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"method-tidy-table--1","dir":"Reference","previous_headings":"","what":"Method tidy_table2()","title":"Tool1 Object — Tool1","text":"Tidy table2.tsv file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool1 Object — Tool1","text":"","code":"Tool1$tidy_table2(x)"},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool1 Object — Tool1","text":"x (character(1)) Path file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"method-parse-table--2","dir":"Reference","previous_headings":"","what":"Method parse_table3()","title":"Tool1 Object — Tool1","text":"Read table3.tsv file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool1 Object — Tool1","text":"","code":"Tool1$parse_table3(x)"},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool1 Object — Tool1","text":"x (character(1)) Path file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"method-tidy-table--2","dir":"Reference","previous_headings":"","what":"Method tidy_table3()","title":"Tool1 Object — Tool1","text":"Tidy table3.tsv file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool1 Object — Tool1","text":"","code":"Tool1$tidy_table3(x)"},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool1 Object — Tool1","text":"x (character(1)) Path file.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Tool1 Object — Tool1","text":"objects class cloneable method.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Tool1 Object — Tool1","text":"","code":"Tool1$clone(deep = FALSE)"},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tool1 Object — Tool1","text":"deep Whether make deep clone.","code":""},{"path":"https://umccr.github.io/nemo/reference/Tool1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tool1 Object — Tool1","text":"","code":"cls <- Tool1 indir <- system.file(\"extdata/tool1\", package = \"nemo\") odir <- tempdir() id <- \"tool1_run1\" obj <- cls$new(indir) obj$nemofy(odir = odir, format = \"parquet\", id = id) (lf <- list.files(odir, pattern = \"tool1.*parquet\", full.names = FALSE)) #> [1] \"sampleA_2_tool1_table1.parquet\" \"sampleA_tool1_table1.parquet\"   #> [3] \"sampleA_tool1_table2.parquet\"   \"sampleA_tool1_table3.parquet\""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Workflow Object — Workflow","title":"Workflow Object — Workflow","text":"Workflow composed multiple Tools.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Workflow Object — Workflow","text":"name (character(1)) Name workflow. path (character(n)) Path(s) workflow results. tools (list(n)) List Tools compose Workflow. files_tbl (tibble(n)) Tibble files list_files_dir().","code":""},{"path":[]},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Workflow Object — Workflow","text":"Workflow$new() Workflow$print() Workflow$filter_files() Workflow$list_files() Workflow$tidy() Workflow$write() Workflow$nemofy() Workflow$get_raw_schemas_all() Workflow$get_tidy_schemas_all() Workflow$get_tbls() Workflow$clone()","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Workflow Object — Workflow","text":"Create new Workflow object.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$new(name = NULL, path = NULL, tools = NULL)"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Object — Workflow","text":"name (character(1)) Name workflow. path (character(n)) Path(s) workflow results. tools (list(n)) List Tools compose Workflow.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Workflow Object — Workflow","text":"Print details File.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$print(...)"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Object — Workflow","text":"... (ignored).","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-filter-files-","dir":"Reference","previous_headings":"","what":"Method filter_files()","title":"Workflow Object — Workflow","text":"Filter files given workflow directory.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$filter_files(include = NULL, exclude = NULL)"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Object — Workflow","text":"include (character(n)) Files include. exclude (character(n)) Files exclude.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-list-files-","dir":"Reference","previous_headings":"","what":"Method list_files()","title":"Workflow Object — Workflow","text":"List files given workflow directory.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$list_files(type = c(\"file\", \"symlink\"))"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Object — Workflow","text":"type (character(1)) File types(s) return (e.g. , file, directory, symlink). See fs::dir_info.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Object — Workflow","text":"tibble files found Tool.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-tidy-","dir":"Reference","previous_headings":"","what":"Method tidy()","title":"Workflow Object — Workflow","text":"Tidy Workflow files.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$tidy(tidy = TRUE, keep_raw = FALSE)"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Object — Workflow","text":"tidy (logical(1)) raw parsed tibbles get tidied? keep_raw (logical(1)) raw parsed tibbles kept final output?","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Object — Workflow","text":"self invisibly.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-write-","dir":"Reference","previous_headings":"","what":"Method write()","title":"Workflow Object — Workflow","text":"Write tidy tibbles.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$write(odir = \".\", format = \"tsv\", id = NULL, dbconn = NULL)"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Object — Workflow","text":"odir (character(1)) Directory path output tidy files. format (character(1)) Format output files. id (character(1)) ID use dataset (e.g. wfrid.123, prid.456). dbconn (DBIConnection) Database connection object (see DBI::dbConnect).","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Object — Workflow","text":"tibble tidy data output location prefix.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-nemofy-","dir":"Reference","previous_headings":"","what":"Method nemofy()","title":"Workflow Object — Workflow","text":"Parse, filter, tidy write files.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$nemofy(   odir = \".\",   format = \"tsv\",   id = NULL,   dbconn = NULL,   include = NULL,   exclude = NULL )"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Object — Workflow","text":"odir (character(1)) Directory path output tidy files. format (character(1)) Format output files. id (character(1)) ID use dataset (e.g. wfrid.123, prid.456). dbconn (DBIConnection) Database connection object (see DBI::dbConnect). include (character(n)) Files include. exclude (character(n)) Files exclude.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Object — Workflow","text":"tibble tidy data output location prefix.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-get-raw-schemas-all-","dir":"Reference","previous_headings":"","what":"Method get_raw_schemas_all()","title":"Workflow Object — Workflow","text":"Get raw schemas Tools.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$get_raw_schemas_all()"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Object — Workflow","text":"Tibble names tool file, schema version.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-get-tidy-schemas-all-","dir":"Reference","previous_headings":"","what":"Method get_tidy_schemas_all()","title":"Workflow Object — Workflow","text":"Get tidy schemas Tools.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$get_tidy_schemas_all()"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Object — Workflow","text":"Tibble names tool tbl, schema version.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-get-tbls-","dir":"Reference","previous_headings":"","what":"Method get_tbls()","title":"Workflow Object — Workflow","text":"Get tidy tbls Tools.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$get_tbls()"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Workflow Object — Workflow","text":"Tibble tidy tbls Tools.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Workflow Object — Workflow","text":"objects class cloneable method.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow Object — Workflow","text":"","code":"Workflow$clone(deep = FALSE)"},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow Object — Workflow","text":"deep Whether make deep clone.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workflow Object — Workflow","text":"","code":"path <- system.file(\"extdata/tool1\", package = \"nemo\") tools <- list(tool1 = Tool1) wf1 <- Workflow$new(name = \"foo\", path = path, tools = tools) odir <- tempdir() wf1$list_files() #> # A tibble: 4 × 10 #>   tool_parser  parser bname        size lastmodified        path  pattern prefix #>   <glue>       <chr>  <chr>       <fs:> <dttm>              <chr> <chr>   <glue> #> 1 tool1_table1 table1 sampleA.to…   113 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… #> 2 tool1_table1 table1 sampleA.to…   153 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… #> 3 tool1_table2 table2 sampleA.to…    70 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… #> 4 tool1_table3 table3 sampleA.to…    83 2025-09-07 11:31:27 /hom… \"\\\\.to… sampl… #> # ℹ 2 more variables: schema <list>, group <glue> wf1$nemofy(odir = odir, format = \"parquet\", id = \"run1\") #> # A tibble: 4 × 9 #>   tool_parser  parser prefix  tidy_name tidy_data tbl_name fpfix dbtab  out      #>   <glue>       <chr>  <glue>  <chr>     <list>    <glue>   <glu> <list> <list>   #> 1 tool1_table1 table1 sampleA table1    <tibble>  tool1_t… /tmp… <NULL> <tibble> #> 2 tool1_table1 table1 sample… table1    <tibble>  tool1_t… /tmp… <NULL> <tibble> #> 3 tool1_table2 table2 sampleA table2    <tibble>  tool1_t… /tmp… <NULL> <tibble> #> 4 tool1_table3 table3 sampleA table3    <tibble>  tool1_t… /tmp… <NULL> <tibble> (lf <- list.files(odir, pattern = \"tool1.*parquet\", full.names = FALSE)) #> [1] \"sampleA_2_tool1_table1.parquet\" \"sampleA_tool1_table1.parquet\"   #> [3] \"sampleA_tool1_table2.parquet\"   \"sampleA_tool1_table3.parquet\"   #dbconn <- DBI::dbConnect(drv = RPostgres::Postgres(), dbname = \"nemo\", user = \"orcabus\") #wf1$nemofy(format = \"db\", id = \"runABC\", dbconn = dbconn)"},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":null,"dir":"Reference","previous_headings":"","what":"Workflow1 Object — Workflow1","title":"Workflow1 Object — Workflow1","text":"Workflow1 file parsing manipulation.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Workflow1 Object — Workflow1","text":"nemo::Workflow -> Workflow1","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Workflow1 Object — Workflow1","text":"nemo::Workflow$filter_files() nemo::Workflow$get_raw_schemas_all() nemo::Workflow$get_tbls() nemo::Workflow$get_tidy_schemas_all() nemo::Workflow$list_files() nemo::Workflow$nemofy() nemo::Workflow$print() nemo::Workflow$tidy() nemo::Workflow$write()","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Workflow1 Object — Workflow1","text":"Workflow1$new() Workflow1$clone()","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Workflow1 Object — Workflow1","text":"Create new Workflow1 object.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow1 Object — Workflow1","text":"","code":"Workflow1$new(path = NULL)"},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow1 Object — Workflow1","text":"path (character(n)) Path(s) Workflow1 results.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Workflow1 Object — Workflow1","text":"objects class cloneable method.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Workflow1 Object — Workflow1","text":"","code":"Workflow1$clone(deep = FALSE)"},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Workflow1 Object — Workflow1","text":"deep Whether make deep clone.","code":""},{"path":"https://umccr.github.io/nemo/reference/Workflow1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Workflow1 Object — Workflow1","text":"","code":"path <- system.file(\"extdata/tool1\", package = \"nemo\") odir <- tempdir() id <- \"workflow1_run1\" w <- Workflow1$new(path) x <- w$nemofy(odir = odir, format = \"parquet\", id = id) (lf <- list.files(odir, pattern = \"tool1.*parquet\", full.names = FALSE)) #> [1] \"sampleA_2_tool1_table1.parquet\" \"sampleA_tool1_table1.parquet\"   #> [3] \"sampleA_tool1_table2.parquet\"   \"sampleA_tool1_table3.parquet\""},{"path":"https://umccr.github.io/nemo/reference/config_prep_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare config from raw file — config_prep_raw","title":"Prepare config from raw file — config_prep_raw","text":"Prepares config raw file.","code":""},{"path":"https://umccr.github.io/nemo/reference/config_prep_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare config from raw file — config_prep_raw","text":"","code":"config_prep_raw(path, name, descr, pat, type = \"tsv\", v = \"latest\", ...)"},{"path":"https://umccr.github.io/nemo/reference/config_prep_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare config from raw file — config_prep_raw","text":"path (character(1)) File path. name (character(1)) File nickname. descr (character(1)) File description. pat (character(1)) File pattern. type (character(1)) File type. v (character(1)) File version. ... Passed readr::read_delim.","code":""},{"path":"https://umccr.github.io/nemo/reference/config_prep_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare config from raw file — config_prep_raw","text":"","code":"if (FALSE) { # \\dontrun{ path <- here::here(\"nogit/oa_v2/esvee/prep/COLO829_tumor.esvee.prep.fragment_length.tsv\") name <- \"prepfraglen\" descr <- \"Fragment length stats.\" pat <- \"\\\\.esvee\\\\.prep\\\\.fragment_length\\\\.tsv$\" type <- \"tsv\" v <- \"latest\" l <- config_prep_raw(path = path, name = name, descr = descr, pat = pat, type = type, v = v) } # }"},{"path":"https://umccr.github.io/nemo/reference/config_prep_raw_schema.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare config schema from raw file — config_prep_raw_schema","title":"Prepare config schema from raw file — config_prep_raw_schema","text":"Prepares config schema raw file.","code":""},{"path":"https://umccr.github.io/nemo/reference/config_prep_raw_schema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare config schema from raw file — config_prep_raw_schema","text":"","code":"config_prep_raw_schema(path, ...)"},{"path":"https://umccr.github.io/nemo/reference/config_prep_raw_schema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare config schema from raw file — config_prep_raw_schema","text":"path (character(1)) File path. ... Passed readr::read_delim.","code":""},{"path":"https://umccr.github.io/nemo/reference/config_prep_raw_schema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare config schema from raw file — config_prep_raw_schema","text":"","code":"if (FALSE) { # \\dontrun{ path <- here::here(\"nogit/oa_v2/esvee/prep/COLO829_tumor.esvee.prep.fragment_length.tsv\") config_prep_raw_schema(path = path, delim = \"\\t\") } # }"},{"path":"https://umccr.github.io/nemo/reference/empty_tbl.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Empty Tibble — empty_tbl","title":"Create Empty Tibble — empty_tbl","text":"https://stackoverflow.com//62535671/2169986. Useful handling edge cases empty data. e.g. virusbreakend.vcf.summary.tsv","code":""},{"path":"https://umccr.github.io/nemo/reference/empty_tbl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Empty Tibble — empty_tbl","text":"","code":"empty_tbl(cnames, ctypes = readr::cols(.default = \"c\"))"},{"path":"https://umccr.github.io/nemo/reference/empty_tbl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Empty Tibble — empty_tbl","text":"cnames (character(n)) Character vector column names use. ctypes (character(n)) Character vector column types corresponding cnames.","code":""},{"path":"https://umccr.github.io/nemo/reference/empty_tbl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Empty Tibble — empty_tbl","text":"tibble 0 rows given column names.","code":""},{"path":"https://umccr.github.io/nemo/reference/empty_tbl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Empty Tibble — empty_tbl","text":"","code":"(x <- empty_tbl(cnames = c(\"a\", \"b\", \"c\"))) #> # A tibble: 0 × 3 #> # ℹ 3 variables: a <chr>, b <chr>, c <chr>"},{"path":"https://umccr.github.io/nemo/reference/enframe_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Enframe Data — enframe_data","title":"Enframe Data — enframe_data","text":"Enframe Data","code":""},{"path":"https://umccr.github.io/nemo/reference/enframe_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enframe Data — enframe_data","text":"","code":"enframe_data(x)"},{"path":"https://umccr.github.io/nemo/reference/enframe_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enframe Data — enframe_data","text":"x (list()) List enframe.","code":""},{"path":"https://umccr.github.io/nemo/reference/enframe_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enframe Data — enframe_data","text":"Enframed data column name \"data\".","code":""},{"path":"https://umccr.github.io/nemo/reference/file_hdr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file header — file_hdr","title":"Get file header — file_hdr","text":"Returns column names file without reading entire file.","code":""},{"path":"https://umccr.github.io/nemo/reference/file_hdr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file header — file_hdr","text":"","code":"file_hdr(fpath, delim = \"\\t\", n_max = 0, ...)"},{"path":"https://umccr.github.io/nemo/reference/file_hdr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file header — file_hdr","text":"fpath (character(1)) File path. delim (character(1)) File delimiter. n_max (integer(1)) Maximum number lines read. ... Passed readr::read_delim.","code":""},{"path":"https://umccr.github.io/nemo/reference/file_hdr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get file header — file_hdr","text":"","code":"dir1 <- system.file(\"extdata/tool1\", package = \"nemo\") fpath <- file.path(dir1, \"latest\", \"sampleA.tool1.table1.tsv\") (hdr <- file_hdr(fpath)) #> [1] \"SampleID\"   \"Chromosome\" \"Start\"      \"End\"        \"metricX\"    #> [6] \"metricY\"    \"metricZ\""},{"path":"https://umccr.github.io/nemo/reference/get_python.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Python Binary — get_python","title":"Get Python Binary — get_python","text":"Get path Python binary system PATH.","code":""},{"path":"https://umccr.github.io/nemo/reference/get_python.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Python Binary — get_python","text":"","code":"get_python()"},{"path":"https://umccr.github.io/nemo/reference/get_python.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Python Binary — get_python","text":"Path Python binary.","code":""},{"path":"https://umccr.github.io/nemo/reference/get_tbl_version_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Table Version Attribute — get_tbl_version_attr","title":"Get Table Version Attribute — get_tbl_version_attr","text":"Get version attribute table.","code":""},{"path":"https://umccr.github.io/nemo/reference/get_tbl_version_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Table Version Attribute — get_tbl_version_attr","text":"","code":"get_tbl_version_attr(tbl, x = \"file_version\")"},{"path":"https://umccr.github.io/nemo/reference/get_tbl_version_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Table Version Attribute — get_tbl_version_attr","text":"tbl (tibble()) Table version attribute. x (character(1)) Name attribute retrieve.","code":""},{"path":"https://umccr.github.io/nemo/reference/get_tbl_version_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Table Version Attribute — get_tbl_version_attr","text":"","code":"path <- system.file(\"extdata/tool1\", package = \"nemo\") path2 <- file.path(path, \"v1.2.3\", \"sampleA.tool1.table1.tsv\") x <- Tool1$new(path)$tidy(keep_raw = TRUE) ind <- which(x$tbls$path == path2) stopifnot(length(ind) == 1) (v <- get_tbl_version_attr(x$tbls$raw[[ind]])) #> [1] \"v1.2.3\""},{"path":"https://umccr.github.io/nemo/reference/list_files_dir.html","id":null,"dir":"Reference","previous_headings":"","what":"List Files — list_files_dir","title":"List Files — list_files_dir","text":"Lists files inside given directory.","code":""},{"path":"https://umccr.github.io/nemo/reference/list_files_dir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Files — list_files_dir","text":"","code":"list_files_dir(d, max_files = NULL, type = \"file\")"},{"path":"https://umccr.github.io/nemo/reference/list_files_dir.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Files — list_files_dir","text":"d (character(n)) Character vector one paths. max_files (integer(1)) Max files returned. type (character(n)) File type(s) return (e.g. , file, directory, symlink). See fs::dir_info.","code":""},{"path":"https://umccr.github.io/nemo/reference/list_files_dir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Files — list_files_dir","text":"tibble file basename, size, last modification timestamp full path.","code":""},{"path":"https://umccr.github.io/nemo/reference/list_files_dir.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Files — list_files_dir","text":"","code":"d <- system.file(\"R\", package = \"nemo\") x <- list_files_dir(d)"},{"path":"https://umccr.github.io/nemo/reference/nemo-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nemo: Tidy and explore outputs from bioinformatic pipelines — nemo-package","title":"nemo: Tidy and explore outputs from bioinformatic pipelines — nemo-package","text":"Provides base components tidying exploring outputs bioinformatic pipelines.","code":""},{"path":[]},{"path":"https://umccr.github.io/nemo/reference/nemo-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nemo: Tidy and explore outputs from bioinformatic pipelines — nemo-package","text":"Maintainer: Peter Diakumis peterdiakumis@gmail.com (ORCID)","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_cli.html","id":null,"dir":"Reference","previous_headings":"","what":"Command line interface for nemo — nemo_cli","title":"Command line interface for nemo — nemo_cli","text":"Creates command line interface (CLI) nemo package using argparse package.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_cli.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Command line interface for nemo — nemo_cli","text":"","code":"nemo_cli(pkg = NULL, descr = NULL, wf = NULL)"},{"path":"https://umccr.github.io/nemo/reference/nemo_cli.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Command line interface for nemo — nemo_cli","text":"pkg (character(1)) Package name. descr (character(1)) Description CLI program. wf (character(1)) Workflow name.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Log a message with a specified level — nemo_log","title":"Log a message with a specified level — nemo_log","text":"Log message specified level","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log a message with a specified level — nemo_log","text":"","code":"nemo_log(level, msg, ...)"},{"path":"https://umccr.github.io/nemo/reference/nemo_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log a message with a specified level — nemo_log","text":"level log level (\"DEBUG\", \"INFO\", \"WARN\", \"ERROR\", \"FATAL\"). msg message log. Use sprintf formatting. ... Values format message. See sprintf details.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_log_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Print current timestamp for logging — nemo_log_date","title":"Print current timestamp for logging — nemo_log_date","text":"Print current timestamp logging","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_log_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print current timestamp for logging — nemo_log_date","text":"","code":"nemo_log_date()"},{"path":"https://umccr.github.io/nemo/reference/nemo_log_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print current timestamp for logging — nemo_log_date","text":"Current timestamp character.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_out_formats.html","id":null,"dir":"Reference","previous_headings":"","what":"Output Formats Supported — nemo_out_formats","title":"Output Formats Supported — nemo_out_formats","text":"Output Formats Supported","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_out_formats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output Formats Supported — nemo_out_formats","text":"","code":"nemo_out_formats()"},{"path":"https://umccr.github.io/nemo/reference/nemo_out_formats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Output Formats Supported — nemo_out_formats","text":"Character vector supported output formats.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_write.html","id":null,"dir":"Reference","previous_headings":"","what":"Write data — nemo_write","title":"Write data — nemo_write","text":"Writes tabular data given format.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write data — nemo_write","text":"","code":"nemo_write(   d,   fpfix = NULL,   format = \"tsv\",   id = NULL,   dbconn = NULL,   dbtab = NULL )"},{"path":"https://umccr.github.io/nemo/reference/nemo_write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write data — nemo_write","text":"d (data.frame()) data.frame (tibble) tidy data. fpfix (character(1)) File prefix. file extension generated automatically via format argument. format db, inserted nemo_pfix column. format (character(1)) Output format. One tsv, csv, parquet, rds, db. id (character(1)) ID use first nemo_id column table. dbconn (DBIConnection(1)) Database connection object (see DBI::dbConnect). Used format db. dbtab (character(1)) Database table name (see DBI::dbWriteTable). Used format db.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemo_write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write data — nemo_write","text":"","code":"d <- tibble::tibble(name = \"foo\", data = 123) fpfix <- file.path(tempdir(), \"data_test1\") format <- \"csv\" id <- \"run1\" nemo_write(d = d, fpfix = fpfix, format = format, id = id) (res <- readr::read_csv(glue::glue(\"{fpfix}.csv.gz\"), show_col_types = FALSE)) #> # A tibble: 1 × 3 #>   nemo_id name   data #>   <chr>   <chr> <dbl> #> 1 run1    foo     123 if (FALSE) { # RPostgres::postgresHasDefault() # for database writing con <- DBI::dbConnect(RPostgres::Postgres()) tbl_nm <- \"awesome_tbl\" nemo_write(d = d, fpfix = basename(fpfix), format = \"db\", id = \"123\", dbconn = con, dbtab = tbl_nm) DBI::dbListTables(con) DBI::dbReadTable(con, tbl_nm) DBI::dbDisconnect(con) }"},{"path":"https://umccr.github.io/nemo/reference/nemoverse_wf_dispatch.html","id":null,"dir":"Reference","previous_headings":"","what":"Nemoverse Workflow Dispatcher — nemoverse_wf_dispatch","title":"Nemoverse Workflow Dispatcher — nemoverse_wf_dispatch","text":"Dispatches nemoverse workflow class based chosen workflow.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemoverse_wf_dispatch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nemoverse Workflow Dispatcher — nemoverse_wf_dispatch","text":"","code":"nemoverse_wf_dispatch(wf = NULL)"},{"path":"https://umccr.github.io/nemo/reference/nemoverse_wf_dispatch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nemoverse Workflow Dispatcher — nemoverse_wf_dispatch","text":"wf Workflow name.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemoverse_wf_dispatch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nemoverse Workflow Dispatcher — nemoverse_wf_dispatch","text":"nemo workflow class initiate.","code":""},{"path":"https://umccr.github.io/nemo/reference/nemoverse_wf_dispatch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nemoverse Workflow Dispatcher — nemoverse_wf_dispatch","text":"","code":"wf <- \"basemean\" (fun <- nemoverse_wf_dispatch(wf)) #> function (x, ...)  #> UseMethod(\"mean\") #> <bytecode: 0x559a36f59880> #> <environment: namespace:base>"},{"path":"https://umccr.github.io/nemo/reference/parse_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse file — parse_file","title":"Parse file — parse_file","text":"Parses files.","code":""},{"path":"https://umccr.github.io/nemo/reference/parse_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse file — parse_file","text":"","code":"parse_file(fpath, pname, schemas_all, delim = \"\\t\", ...)"},{"path":"https://umccr.github.io/nemo/reference/parse_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse file — parse_file","text":"fpath (character(1)) File path. pname (character(1)) Parser name (e.g. \"breakends\" - see docs). schemas_all (tibble()) Tibble name, version schema list-col. delim (character(1)) File delimiter. ... Passed readr::read_delim.","code":""},{"path":"https://umccr.github.io/nemo/reference/parse_file.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse file — parse_file","text":"","code":"path <- system.file(\"extdata/tool1\", package = \"nemo\") x <- Tool$new(\"tool1\", pkg = \"nemo\", path) schemas_all <- x$raw_schemas_all pname <- \"table1\" fpath <- file.path(path, \"latest\", \"sampleA.tool1.table1.tsv\") (d <- parse_file(fpath, pname, schemas_all)) #> # A tibble: 3 × 7 #>   SampleID Chromosome Start   End metricX metricY metricZ #>   <chr>    <chr>      <int> <int>   <dbl>   <dbl>   <dbl> #> 1 sampleA  chr1          10    50     0.1     0.4     0.7 #> 2 sampleA  chr2         100   500     0.2     0.5     0.8 #> 3 sampleA  chr3        1000  5000     0.3     0.6     0.9"},{"path":"https://umccr.github.io/nemo/reference/parse_file_nohead.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse headless file — parse_file_nohead","title":"Parse headless file — parse_file_nohead","text":"Parses files column names.","code":""},{"path":"https://umccr.github.io/nemo/reference/parse_file_nohead.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse headless file — parse_file_nohead","text":"","code":"parse_file_nohead(fpath, schema, delim = \"\\t\", ...)"},{"path":"https://umccr.github.io/nemo/reference/parse_file_nohead.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse headless file — parse_file_nohead","text":"fpath (character(1)) File path. schema (tibble()) Schema tibble version schema list-col. delim (character(1)) File delimiter. ... Passed readr::read_delim.","code":""},{"path":"https://umccr.github.io/nemo/reference/parse_file_nohead.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse headless file — parse_file_nohead","text":"","code":"path <- system.file(\"extdata/tool1\", package = \"nemo\") x <- Tool$new(\"tool1\", pkg = \"nemo\", path = path) schema <- x$raw_schemas_all |>        dplyr::filter(.data$name == \"table3\") |>        dplyr::select(\"version\", \"schema\") fpath <- file.path(path, \"latest\", \"sampleA.tool1.table3.tsv\") (d <- parse_file_nohead(fpath, schema)) #> # A tibble: 5 × 2 #>   Variable      Value   #>   <chr>         <chr>   #> 1 SampleID      sampleA #> 2 QCStatus      Pass    #> 3 TotalReads    10000   #> 4 MappedReads   9500    #> 5 UnmappedReads 500"},{"path":"https://umccr.github.io/nemo/reference/pkg_found.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if Package is Installed — pkg_found","title":"Check if Package is Installed — pkg_found","text":"Check R package installed.","code":""},{"path":"https://umccr.github.io/nemo/reference/pkg_found.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if Package is Installed — pkg_found","text":"","code":"pkg_found(p)"},{"path":"https://umccr.github.io/nemo/reference/pkg_found.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if Package is Installed — pkg_found","text":"p (character(1)) Package name.","code":""},{"path":"https://umccr.github.io/nemo/reference/pkg_found.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if Package is Installed — pkg_found","text":"TRUE package installed, FALSE otherwise.","code":""},{"path":"https://umccr.github.io/nemo/reference/pkg_found.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if Package is Installed — pkg_found","text":"","code":"pkg_found(\"base\") #> [1] TRUE pkg_found(\"somefakepackagename\") #> [1] FALSE"},{"path":"https://umccr.github.io/nemo/reference/schema_guess.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess Schema — schema_guess","title":"Guess Schema — schema_guess","text":"Given tibble available schemas, filters one matching given column names. Errors unsuccessful.","code":""},{"path":"https://umccr.github.io/nemo/reference/schema_guess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess Schema — schema_guess","text":"","code":"schema_guess(pname, cnames, schemas_all)"},{"path":"https://umccr.github.io/nemo/reference/schema_guess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess Schema — schema_guess","text":"pname (character(1)) Parser name. cnames (character(n)) Column names. schemas_all (tibble()) Tibble name, version schema list-col.","code":""},{"path":"https://umccr.github.io/nemo/reference/schema_guess.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess Schema — schema_guess","text":"","code":"dir1 <- system.file(\"extdata/tool1\", package = \"nemo\") fpath1 <- file.path(dir1, \"latest\", \"sampleA.tool1.table1.tsv\") fpath2 <- file.path(dir1, \"v1.2.3\", \"sampleA.tool1.table1.tsv\") pname <- \"table1\" cnames1 <- file_hdr(fpath1) cnames2 <- file_hdr(fpath2) conf <- Config$new(\"tool1\", pkg = \"nemo\") schemas_all <- conf$get_raw_schemas_all() (s1 <- schema_guess(pname, cnames1, schemas_all)) #> $schema #> # A tibble: 7 × 2 #>   field      type  #>   <chr>      <chr> #> 1 SampleID   c     #> 2 Chromosome c     #> 3 Start      i     #> 4 End        i     #> 5 metricX    d     #> 6 metricY    d     #> 7 metricZ    d     #>  #> $version #> [1] \"latest\" #>  (s2 <- schema_guess(pname, cnames2, schemas_all)) #> $schema #> # A tibble: 5 × 2 #>   field      type  #>   <chr>      <chr> #> 1 SampleID   c     #> 2 Chromosome c     #> 3 Start      i     #> 4 End        i     #> 5 metricX    d     #>  #> $version #> [1] \"v1.2.3\" #>"},{"path":"https://umccr.github.io/nemo/reference/set_tbl_version_attr.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Table Version Attribute — set_tbl_version_attr","title":"Set Table Version Attribute — set_tbl_version_attr","text":"Set version attribute table.","code":""},{"path":"https://umccr.github.io/nemo/reference/set_tbl_version_attr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Table Version Attribute — set_tbl_version_attr","text":"","code":"set_tbl_version_attr(tbl, v, x = \"file_version\")"},{"path":"https://umccr.github.io/nemo/reference/set_tbl_version_attr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Table Version Attribute — set_tbl_version_attr","text":"tbl (tibble()) Table version attribute. v (character(1)) Version string set. x (character(1)) Name attribute retrieve.","code":""},{"path":"https://umccr.github.io/nemo/reference/set_tbl_version_attr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Table Version Attribute — set_tbl_version_attr","text":"","code":"d <- tibble::tibble(a = 1:3, b = letters[1:3]) v <- \"v1.2.3\" d <- set_tbl_version_attr(d, v) (a <- attr(d, \"file_version\")) #> [1] \"v1.2.3\""},{"path":"https://umccr.github.io/nemo/reference/valid_out_fmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Output Format is Valid — valid_out_fmt","title":"Output Format is Valid — valid_out_fmt","text":"Checks specified output format valid.","code":""},{"path":"https://umccr.github.io/nemo/reference/valid_out_fmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Output Format is Valid — valid_out_fmt","text":"","code":"valid_out_fmt(x, choices = nemo_out_formats())"},{"path":"https://umccr.github.io/nemo/reference/valid_out_fmt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Output Format is Valid — valid_out_fmt","text":"x Output format. choices Available choices valid output formats.","code":""},{"path":"https://umccr.github.io/nemo/reference/valid_out_fmt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Output Format is Valid — valid_out_fmt","text":"","code":"valid_out_fmt(\"tsv\") #> [1] TRUE"}]
